stages:
  - test
  - build
  - deploy-dev
  - deploy-demo

test:
  stage: test
  image: python:3.10
  before_script:
    - pip install -r requirements-dev.txt
    - cp src/api/.env.example src/api/.env
  script:
    - python -m pytest tests/ -v --cov=src --cov-report=xml:coverage.xml --cov-config=pytest.ini
    - |
      # Pick the right variable for every pipeline type
      BRANCH_NAME="${CI_COMMIT_REF_NAME:-$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
      
      codecovcli upload-process -B $BRANCH_NAME -C $CI_COMMIT_SHA
  artifacts:
    paths:
      - coverage.xml
    expire_in: 1 week
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: $CI_PIPELINE_SOURCE == "web"

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - if [ "$CI_COMMIT_REF_NAME" == "v2-dev" ]; then export APP_URL=$DEV_APP_URL; else export APP_URL=$PROD_APP_URL; fi
    - if [ "$CI_COMMIT_REF_NAME" == "v2-dev" ]; then export ENV=$DEV_ENV; else export ENV=$PROD_ENV; fi
    - if [ "$CI_COMMIT_REF_NAME" == "v2-dev" ]; then export S3_BUCKET_NAME=$DEV_S3_BUCKET_NAME; else export S3_BUCKET_NAME=$PROD_S3_BUCKET_NAME; fi
    - if [ "$CI_COMMIT_REF_NAME" == "v2-dev" ]; then export S3_FOLDER_NAME=$DEV_S3_FOLDER_NAME; else export S3_FOLDER_NAME=$PROD_S3_FOLDER_NAME; fi
    - docker build --build-arg APP_URL=$APP_URL --build-arg S3_BUCKET_NAME=$S3_BUCKET_NAME --build-arg S3_FOLDER_NAME=$S3_FOLDER_NAME --build-arg ENV=$ENV --platform linux/amd64 -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  rules:
    # - if: '$CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_REF_NAME == "v2-dev" || $CI_COMMIT_REF_NAME == "v2")'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && ($CI_COMMIT_BRANCH == "v2-dev" || $CI_COMMIT_BRANCH == "v2")'
    - if: '$CI_PIPELINE_SOURCE == "web" && ($CI_COMMIT_BRANCH == "v2-dev" || $CI_COMMIT_BRANCH == "v2")'

deploy-dev:
  stage: deploy-dev
  image: ubuntu:latest
  before_script:
    - apt-get update
    - apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_DEV_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_DEMO_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.ai.dev.yml $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP:~/docker-compose.ai.dev.yml
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP "sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD"
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP 'sudo docker compose -f docker-compose.ai.dev.yml -p sensai-dev down --rmi "all"'
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP 'sudo docker compose -f docker-compose.ai.dev.yml pull'
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP 'sudo docker compose -f docker-compose.ai.dev.yml -p sensai-dev up -d'
  rules:
    # - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "v2-dev" '
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "v2-dev"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == "v2-dev"'

deploy-demo:
  stage: deploy-demo
  image: ubuntu:latest
  before_script:
    - apt-get update
    - apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_DEV_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_DEMO_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.ai.demo.yml $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP:~/docker-compose.ai.demo.yml
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP "sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD"
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP 'sudo docker compose -f docker-compose.ai.demo.yml -p sensai-prod down --rmi "all"'
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP 'sudo docker compose -f docker-compose.ai.demo.yml pull'
    - ssh $DEPLOY_DEV_SERVER_USERNAME@$DEPLOY_DEMO_SERVER_IP 'sudo docker compose -f docker-compose.ai.demo.yml -p sensai-prod up -d'
  rules:
    # - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "v2" '
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "v2"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == "v2"'
